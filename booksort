#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Скрипт для сортировки электронных книг

Использование

    %s [--move|-m|--simulate|-s|--new|-n|--verbose|-v|--help|-h] files...

Скрипт извлекает метаинформацию из электронных книг в формате .fb2,
.epub, .pdf и .djvu и копирует их в иерархию директорий вида
А/Автор/Заглоовок или А/Автор/Серия/N.Заголовок текущей директории.

При формировании имени файла из имени автора и заголовка удаляются
(заменяются на подчерки) пробелы и символы, не допустимые в именах
файлов на файловой системе FAT.

Если авторов указано несколько, используется первый по алфавиту.
Если автора совсем нет, вместо автора используется заголовок.

Для форматов pdf, epub и djvu используется набор эвристик для выделения
имени и фамилии автора из имени в произвольной форме.

Файлы fb2 и fb2.zip помещаются в целевую библиотеку распакованными,
если только в корне не присутствует (пустой) файл с именем zip, тогда
все файлы пакуются, независимо от того были ли они запакованы
исходно.

Опции:

--move, -m

     Удалить исходный файл после успешного копирования

--new, -n

    Копировать только новые файлы, т.е. если обнаруживается, что книга
    с таким заголовком и автором присутствует в библиотеке, то файл
    пропускается

--simulate, -s

     Ничего не копировать, просто выдать на экран список исходных и
     результирующих имен.

--verbose, -v

    В случае ошибки чтения и парсинга файла, выдавать питоновскую stack
    trace, а не только сообщение.

--help, -h

     Выдать справку и завершить работу.

"""
import xml.etree.ElementTree as ET
import zipfile
import sys
import re
import os
import os.path
import shutil
import getopt
import subprocess
NS = {"fb":"http://www.gribuser.ru/xml/fictionbook/2.0",
      'l':"http://www.w3.org/1999/xlink",
      "opf":"http://www.idpf.org/2007/opf",
      'dc':"http://purl.org/dc/elements/1.1/",
      'DC':"http://purl.org/dc/elements/1.0/",
      'Dc':"http://purl.org/metadata/dublin_core"}
NEED_ZIP = False
def getxml(filename):
    """
    Возвращает xml-представление в виде строки байт
    """
    if filename.endswith(".fb2"):
        with open(filename, "rb") as fil:
            content = fil.read()
            fil.close()
            return content
    elif filename.endswith(".zip"):
        with zipfile.ZipFile(filename) as zipf:
            names = [name for name in zipf.namelist() if
                     name.endswith(".fb2")]
            if not names:
                raise ValueError("No fb2 file in %s" % filename)
            elif len(names) > 1:
                raise ValueError("Too many fb2 files in %s" % filename)
            content = zipf.read(names[0])
        return content
    else:
        raise ValueError("Unknown compression suffix %s" % filename)

def transform_author(orig_name):
    """
    Преобразует имя автора, написанное в свободной форме в метаданных
    epub или pdf в имя вида last-name first-name
    """
    orig_name = orig_name.strip()
    print("transform_author(%s)" % orig_name)
    match = re.match(r"(.\.(?:.\.)?)\s?(\w+)", orig_name)
    if match:
        return match.group(2) + " " + match.group(1)
    match = re.match(r"(\w+)\s+(.\.(?:.\.)?)", orig_name)
    if match:
        return match.group(1) + " " + match.group(2)
    match = re.match(r"(\w+),\s+(\S+)", orig_name)
    if match:
        return match.group(1) + " " + match.group(2)
    name_as_list = orig_name.split(" ")
    if (len(name_as_list) == 3 and
            (name_as_list[0][-2:] in ("ов", "ев", "ин", "ко") or
             name_as_list[0][-3:] in ("ман", "сон", "ерг", "yрг")) and
            name_as_list[2].endswith("ич")):
        return name_as_list[1] + " " + name_as_list[0]
    if len(name_as_list) > 1:
        return name_as_list[-1] + " " + name_as_list[0]
    return orig_name

def getepubmeta(filename):
    """
    Возвращает метаданные из epub-файла
    """
    out = {}
    with zipfile.ZipFile(filename) as zipf:
        names = [name for name in zipf.namelist()
                 if name.endswith(".opf")]
        if not names:
            raise ValueError("Cannot find content.opf in %s" % filename)
        tree = ET.fromstring(zipf.read(names[0]))
    authors = (tree.findall(".//dc:creator", NS) +
               tree.findall(".//DC:Creator", NS) +
               tree.findall(".//Dc:Creator", NS))
    title = tree.find(".//dc:title", NS)
    if title is None:
        title = tree.find(".//DC:Title", NS)
    if title is None:
        title = tree.find(".//Dc:Title", NS)
    if title is None:
        raise ValueError("No title found in %s" % filename)
    out["title"] = title.text.strip()
    out["authors"] = []
    for author in authors:
        out["authors"].append(transform_author(author.text))
    if out["authors"]:
        out["authors"].sort()
    else:
        del out["authors"]
    out["format"] = ".epub"
    return out

def cleanup(element):
    """
    Return element text stripped from whitespace at the ends,
    with newlines replaced by spaces and triple dots in the
    beginning converted to unicode '…'
    """
    if element is None:
        return None
    text = element.text
    if text is None:
        return None
    text = text.strip().replace("\n", " ")
    if not text:
        return None
    if text.startswith("..."):
        text = "…" + text[3:]
    return text
def format_author(author, localns):
    """
    Formats content of FictionBook author tag into string
    using lastname firstaname format or nickname if neither lastname
    nor firstname is available.

    Returns string or None if this author tag contain no useful info
    """
    if author is None:
        return None
    astr = []
    for part in ("last-name", "first-name"):
        txt = cleanup(author.find("./fb:" + part, localns))
        if txt is None:
            continue
        astr.append(txt)
    if not astr:
        txt = cleanup(author.find("./fb:nickname", localns))
        if txt is not None:
            astr = [txt]
    if astr:
        return " ".join(astr)
    return None

def getfb2meta(xmltext):
    """
    Возвращает список имен авторов, заглавие, серию и номер в серии
    как словарь.
    """
    out = {}
    tree = ET.fromstring(xmltext)
    root_tag = tree.tag
    if not root_tag.endswith("FictionBook"):
        raise ValueError("Root element not a Fictionbook but %s" % tree.tag)
    # Get fb2 namespace
    localns = {"fb": root_tag[1:root_tag.find("}")],
               'l':"http://www.w3.org/1999/xlink",}
    titleinfo = tree.find("./fb:description/fb:title-info", localns)
    out["title"] = cleanup(titleinfo.find("./fb:book-title", localns))
    sequence = titleinfo.find("./fb:sequence", localns)
    if (sequence is not None and 'number' in sequence.attrib and
            sequence.attrib["number"].isdigit()):
        out["sequence"] = sequence.attrib["name"].strip().replace("\n", " ")
        out["seqno"] = sequence.attrib["number"]
    out["authors"] = []
    for author in titleinfo.findall("./fb:author", localns):
        astr = format_author(author, localns)
        if astr is not None:
            out["authors"].append(astr)
    if not out["authors"]:
        del out["authors"]
    else:
        out["authors"].sort()
    out["format"] = ".fb2"
    return out
def make_name(meta, needzip=False):
    """
    Формирует имя файла из метаинформации.
    """
    if not meta['title']:
        raise ValueError("book has no title")
    title = re.sub(r"[ \t:+\*\"'/\?]+", "_", meta['title'])
    if not title:
        raise ValueError("book has no title")
    if len(title.encode("utf-8")) > 240:
        raise ValueError("Book title too long for filename")
    if "authors" in meta:
        author = re.sub(r"[ \t:+\"'/\?]+", "_", meta['authors'][0])
        if len(author.encode("utf-8")) > 250:
            raise ValueError("Author name too long for directory name")
        dirname = os.path.join(author[0], author)
    else:
        dirname = os.path.join(title[0], title)
    if dirname.endswith("."):
        dirname = dirname[:-1]
    filename = title + meta["format"]
    if 'sequence' in meta:
        dirname += "/" + re.sub(r"[ \t:+\"'/\?]+", "_", meta['sequence'])
        if dirname.endswith("."):
            dirname = dirname[:-1]
        filename = "%02d.%s" % (int(meta['seqno']), filename)
    if needzip:
        filename += ".zip"
    return dirname, filename

def getpdfmeta(filename):
    """
    Извлекает метаинформацию из pdf-файла
    """
    process = subprocess.run(["pdftk", filename, "dump_data_utf8"],
                             text=True, capture_output=True, check=True)
    key = None
    value = None
    meta = {}
    for line in process.stdout.split("\n"):
        if line.startswith("InfoKey: "):
            key = line[9:]
        elif line.startswith("InfoValue: "):
            value = line[11:]
        elif line.startswith("InfoBegin"):
            if key and value:
                meta[key] = value
            key = None
            value = None
    if key:
        meta[key] = value
    out = {}
    if "Title" not in meta:
        raise ValueError("Cannot find title in metainfo of %s" % filename)
    out["title"] = meta["Title"]
    if "Author" in meta:
        out["authors"] = [transform_author(x)
                          for x in meta["Author"].split(",")]
        out["authors"].sort()
    out["format"] = ".pdf"
    return out

def getdjvumeta(filename):
    """
    Извлекает метаинформацию из dejavu файлов
    """
    process = subprocess.run(["djvused", filename, "-e", "print-meta", "-u"],
                             text=True, capture_output=True, check=True)
    meta = {"format":".djvu"}
    for line in process.stdout.split("\n"):
        match = re.match(r'(\w+)\s+"([^"]+)"', line)
        if match:
            meta[match.group(1)] = match.group(2)
    if "author" in meta:
        meta["authors"] = [transform_author(x) for x in
                           meta["author"].split(",")]
        del meta["author"]
    return meta


FORMATS = {
    'epub': getepubmeta,
    'pdf': getpdfmeta,
    'djvu': getdjvumeta
}

def handle_file(infilename, needzip=False, move=False, simulate=False,
                new=False, verbose=False):
    """
    Processes single file. It gets entire command line options array
    expanded into named parameters, so some args are unused
    """
    #pylint: disable=too-many-arguments, unused-argument
    if infilename.endswith(".fb2") or infilename.endswith(".zip"):
        data = getxml(infilename)
        meta = getfb2meta(data)
        filedir, filename = make_name(meta, needzip)
        print(infilename, "=>", filedir + "/" +filename)
        if new and os.path.exists(os.path.join(filedir, filename)):
            print(infilename, "skipped because target exists")
            return
        if simulate:
            return
        os.makedirs(filedir, exist_ok=True)
        if needzip:
            zipf = zipfile.ZipFile(os.path.join(filedir,
                                                filename),
                                   mode="w",
                                   compression=zipfile.ZIP_DEFLATED,
                                   compresslevel=9)
            # strip .zip extnesion from archive member
            outfile = zipf.open(filename[:-4], mode="w")
        else:
            zipf = None
            outfile = open(os.path.join(filedir, filename), "wb")
        outfile.write(data)
        outfile.close()
        if zipf:
            zipf.close()
    else:
        ext = infilename.split(".").pop()
        if not ext in FORMATS:
            raise ValueError("Unknown format %s" % infilename)
        meta = FORMATS[ext](infilename)
        filedir, filename = make_name(meta)
        print(infilename, "=>", filedir + "/" +filename)
        if new and os.path.exists(os.path.join(filedir, filename)):
            print(infilename, " skipped because target exists")
            return
        if simulate:
            return
        os.makedirs(filedir, exist_ok=True)
        shutil.copy(infilename, os.path.join(filedir, filename))
    if move:
        os.unlink(infilename)
    return
def main():
    """
    Обрабатывает аргументы командной строки
    """
    options, files = getopt.getopt(sys.argv[1:], "msvnh",
                                   ["move", "simulate", "verbose",
                                    "new", "help"])
    options = dict(options)
    if "--help" in options or "-h" in options or not files:
        print(__doc__ % sys.argv[0])
        sys.exit(0)
    opts = {"needzip":os.path.exists("zip")}
    for opt in ["move", "simulate", "new", "verbose"]:
        opts[opt] = "--" + opt in options or "-" + opt[0] in options
    if opts["move"] and opts["simulate"]:
        print("Options --move and --simulate cannod be used together\n",
              file=sys.stderr)
        sys.exit(1)
    failures = 0
    for param in files:
        try:
            handle_file(param, **opts)

        except Exception as exch: #pylint: disable=broad-except
            info = sys.exc_info()
            print("Exception processing %s: %s" % (param, str(exch)),
                  file=sys.stderr)
            if opts["verbose"]:
                import traceback
                traceback.print_tb(info[2])
            failures += 1
    if failures:
        print("%d file(s) were unparsable" % failures, file=sys.stderr)
        sys.exit(2)

if __name__ == "__main__":
    main()
